<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

# PCell template
# This macro template provides the framework for a PCell library

# It is recommended to put PCell code into namespaces.
# TODO: change the module name

# The PCell declaration
# Each PCell must provide a declaration. It is recommended to use the PCell name as the class name.
# TODO: change the class name
class Numbering_all(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(Numbering_all, self).__init__()

    # declare the parameters
    # i.e. self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    #      self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    # declare the parameters
    self.param("lo", self.TypeLayer, "Oxide", default = pya.LayerInfo(0, 0))
    self.param("text_line_width", self.TypeInt, "text_line_width", default =5)
    self.param("text_shift_x", self.TypeDouble, "shift text beyond cell x", default =0)
    self.param("text_shift_y", self.TypeDouble, "shift text beyond cell y", default =20)
    self.param("forbidden", self.TypeList, "ignore cells with strings in name", default =["text", "TEXT","Contact","contact","Numbering", "xxx"])
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Numbering_all"
  
  def coerce_parameters_impl(self):
    pass
    # TODO: use x to access parameter x and set_x to modify it's value 
  def produce_impl(self):
    # TODO: produce the cell content 
    # i.e. self.cell().shapes(self.l_layer).insert(pya.Polygon(...))
    layout = pya.CellView.active().layout().dup()
    lay = pya.Layout()
    text_layer = lay.layer(0, 0)
    text_layer_info = pya.LayerInfo(0, 0)  
    for inst in layout.top_cell().each_overlapping_inst(pya.DBox(-1000,-1000,1000,1000)):
      fb_check = False
      for fb in self.forbidden: 
        fb_check  = fb_check or fb in layout.cell(inst.cell_index).name
      if not fb_check:
        inst.explode()
    for inst in layout.top_cell().each_overlapping_inst(pya.DBox(-1000,-1000,10000,10000)):
      fb_check = False
      for fb in self.forbidden: 
        fb_check  = fb_check or fb in layout.cell(inst.cell_index).name
      if not fb_check:
        dbox = inst.dbbox()
        text_param = {'text': str(inst.dtrans.to_itype().disp), 'layer': text_layer_info, 'mag': 10*self.text_line_width}
        text_shapes = lay.create_cell("TEXT", "Basic", text_param).shapes(text_layer)
        text_dbox = lay.create_cell("TEXT", "Basic", text_param).dbbox()
        text_shapes.transform(pya.DTrans(dbox.p1.x + self.text_shift_x, dbox.p2.y + self.text_shift_y))
        self.cell.shapes(self.lo_layer).insert(text_shapes)

    
  
</text>
</klayout-macro>
