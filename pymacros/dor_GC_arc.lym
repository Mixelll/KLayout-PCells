<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import math
from SiEPIC.utils import get_technology, get_technology_by_name

# Import KLayout Python API methods:
# Box, Point, Polygon, Text, Trans, LayerInfo, etc
from pya import *
from func import arc_clockwise,don



class dor_GC_arc(PCellDeclarationHelper):
  """
  The PCell declaration for the strip waveguide taper.
  """

  def __init__(self):

    # Important: initialize the super class
    super(dor_GC_arc, self).__init__()
    TECHNOLOGY = get_technology_by_name('EBeam')

    # declare the parameters
    self.param("silayer", self.TypeLayer, "Si Layer", default = TECHNOLOGY['Si'])
    self.param("N_points", self.TypeInt, "Numbers of points in arc", default = 100)
    self.param("DC0", self.TypeDouble, "Si DC0", default = 0.85)
    self.param("DCf", self.TypeDouble, "Si DCf", default = 0.0057)
    self.param("period", self.TypeDouble, "Period", default = 0.7)
    self.param("N_period", self.TypeInt, "Numbers of periods", default = 25)
    self.param("sector_rad_offset", self.TypeDouble, "Sector Radius Offset", default = 15)
    self.param("sector_angle", self.TypeDouble, "Sector Angle", default = 90)
    self.param("wg_width", self.TypeDouble, "Waveguide Width", default = 0.5)
    self.param("pinrec", self.TypeLayer, "PinRec Layer", default = TECHNOLOGY['PinRec'])
    self.param("devrec", self.TypeLayer, "DevRec Layer", default = TECHNOLOGY['DevRec'])
    # hidden parameters, can be used to query this component:
    self.param("p1", self.TypeShape, "DPoint location of pin1", default = Point(-10000, 0), hidden = True, readonly = True)
    self.param("p2", self.TypeShape, "DPoint location of pin2", default = Point(0, 10000), hidden = True, readonly = True)
    

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "dor_GC_arc(R=" + ('%.3f DC0=%.3f DCf=%.3f Period=%.3f sector_rad_offset=%.3f sector_angle=%.3f wg_width=%.3f' % (self.DC0,self.DCf,self.period,self.N_period, self.sector_rad_offset,self.sector_angle,self.wg_width) ) + ")"

  def can_create_from_shape_impl(self):
    return False



  def produce(self, layout, layers, parameters, cell):
    """
    coerce parameters (make consistent)
    """
    self._layers = layers
    self.cell = cell
    self._param_values = parameters
    self.layout = layout
    shapes = self.cell.shapes


    # cell: layout cell to place the layout
    # LayerSiN: which layer to use
    # w: waveguide width
    # length units in dbu

    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    
    LayerSi = self.silayer
    LayerSiN = self.silayer_layer
    LayerPinRecN = ly.layer(self.pinrec)
    LayerDevRecN = ly.layer(self.devrec)
    
    w = int(round(self.wg_width/dbu))
    p = int(round(self.period/dbu))
    r0 = int(round(self.sector_rad_offset/dbu))
    
    poly_current = arc_clockwise(r0,-self.sector_angle/2,self.sector_angle/2,self.N_points)
    poly_current.extend([Point(0,-w/2), Point(0,w/2)])
    shapes(LayerSiN).insert(Polygon(poly_current)) 
    for i in range(0, self.N_period):
      d = (self.DC0 -self.DCf*i)*p
      poly_current = don(p*i+r0, d+p*i+r0,-self.sector_angle/2,self.sector_angle/2,self.N_points)
      shapes(LayerSiN).insert(Polygon(poly_current))


      
      

    
    # Create the pins on the waveguides, as short paths:
    from SiEPIC._globals import PIN_LENGTH as pin_length
    
    # Pin on the left side:
    p1 = [Point(pin_length/2,0), Point(-pin_length/2,0)]
    p1c = Point(0,0)
    self.set_p1 = p1c
    self.p1 = p1c
    pin = Path(p1, w)
    shapes(LayerPinRecN).insert(pin)
    t = Trans(Trans.R0, 0, 0)
    text = Text ("pin1", t)
    shape = shapes(LayerPinRecN).insert(text)
    shape.text_size = 0.4/dbu



    #return "ebeam_taper_te1550(" + ('%.3f-%.3f-%.3f' % (self.width,self.period,self.length) ) + ")"</text>
</klayout-macro>
