<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>from pya import *

# PCell template
# This macro template provides the framework for a PCell library

# It is recommended to put PCell code into namespaces.
# TODO: change the module name

# The PCell declaration
# Each PCell must provide a declaration. It is recommended to use the PCell name as the class name.
# TODO: change the class name
class Chess(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(Chess, self).__init__()

    # declare the parameters
    # i.e. self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    #      self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    # declare the parameters
    self.param("layers", self.TypeList, "layers", default=[0])
    self.param("box", self.TypeDouble, "box length", default = 100)
    self.param("distance", self.TypeDouble, "distance", default = 100)
    self.param("row", self.TypeInt, "Number of rows", default = 10)
    self.param("column", self.TypeInt, "Number of columns", default = 10)
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Chess"
  
  def coerce_parameters_impl(self):
    pass
    # TODO: use x to access parameter x and set_x to modify it's value 
  def produce_impl(self):
    # TODO: produce the cell content 
    # i.e. self.cell().shapes(self.l_layer).insert(pya.Polygon(...))
    box = DBox(DPoint(0, 0), DPoint(self.box, self.box))
    corrected_distance = (self.box + self.distance)/2
    for l_string in self.layers:
      l = self.layout.layer(int(l_string), 0)
      for i in range(0,self.column):
        self.cell.shapes(l).insert(box.transformed(DTrans(i*(self.box + self.distance), 0)))
      one_row_shapes = self.cell.shapes(l).dup()
      for i in range(1,self.row):
        one_row_shapes.transform(DTrans((-1)**(i+1)*corrected_distance, corrected_distance))
        self.cell.shapes(l).insert(one_row_shapes)</text>
</klayout-macro>
