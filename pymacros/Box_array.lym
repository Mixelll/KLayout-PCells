<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>from pya import *

# PCell template
# This macro template provides the framework for a PCell library

# It is recommended to put PCell code into namespaces.
# TODO: change the module name

# The PCell declaration
# Each PCell must provide a declaration. It is recommended to use the PCell name as the class name.
# TODO: change the class name
class Box_array(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(Box_array, self).__init__()

    # declare the parameters
    # i.e. self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    #      self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    # declare the parameters
    self.param("layers", self.TypeList, "layers", default=[0])
    self.param("box_x", self.TypeDouble, "box_x", default = 100)
    self.param("box_y", self.TypeDouble, "box_y", default = 100)
    self.param("gaps_x", self.TypeList, "gaps_x", default = [200,200])
    self.param("gaps_y", self.TypeList, "gaps_y", default = [10,20,30,40,50,60,70,80,90,100])
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Box array"
  
  def coerce_parameters_impl(self):
    pass
    # TODO: use x to access parameter x and set_x to modify it's value 
  def produce_impl(self):
    # TODO: produce the cell content 
    # i.e. self.cell().shapes(self.l_layer).insert(pya.Polygon(...))
    box = DBox(DPoint(0, 0), DPoint(self.box_x, self.box_y))
    for l_string in self.layers:
      l = self.layout.layer(int(l_string), 0)
      self.cell.shapes(l).insert(box)
      start_x = 0
      if self.gaps_x[0].replace('.','',1).isdigit():
          for gp_x in self.gaps_x:
            start_x += self.box_x + float(gp_x)
            self.cell.shapes(l).insert(box.transformed(DTrans(start_x, 0)))
      one_row_shapes = self.cell.shapes(l).dup()
      if self.gaps_y[0].replace('.','',1).isdigit():
         for gp_y in self.gaps_y:
           one_row_shapes.transform(DTrans(0.0, self.box_y + float(gp_y)))
           self.cell.shapes(l).insert(one_row_shapes)</text>
</klayout-macro>
